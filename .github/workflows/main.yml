name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    env:
      PROJECT_NAME: bytebinder
    strategy:
      matrix:
        os: [windows-latest]
        type: [static, shared]
        build_type: [Release, Debug]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive  # Ensures all submodules are fetched

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install CMake and Ninja
        run: pip install cmake ninja
        if: matrix.os != 'windows-latest'

      - name: Set up Visual Studio Environment
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Configure CMake
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cmake -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DPOLYHOOK_BUILD_STATIC_RUNTIME=ON
          else
            cmake -B build -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DPOLYHOOK_BUILD_STATIC_RUNTIME=ON
          fi
        shell: bash

      - name: Build
        run: cmake --build build --config ${{ matrix.build_type }}

      - name: Normalize OS Name
        id: normalize_os
        run: echo "OS_NAME=$(echo ${{ matrix.os }} | sed 's/-latest//')" >> $GITHUB_ENV

      - name: Package Files
        run: |
          mkdir -p package/include package/lib
          cp -r include package/include
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            if [[ "${{ matrix.type }}" == "shared" ]]; then
              cp build/${{ matrix.build_type }}/${{ env.PROJECT_NAME }}.dll package/lib/bytebinder_${{ env.OS_NAME }}_${{ github.ref_name }}_${{ matrix.build_type }}_${{ matrix.type }}.dll
            else
              cp build/${{ matrix.build_type }}/${{ env.PROJECT_NAME }}.lib package/lib/bytebinder_${{ env.OS_NAME }}_${{ github.ref_name }}_${{ matrix.build_type }}_${{ matrix.type }}.lib
            fi
          else
            if [[ "${{ matrix.type }}" == "shared" ]]; then
              cp build/${{ matrix.build_type }}/${{ env.PROJECT_NAME }}.so package/lib/bytebinder_${{ env.OS_NAME }}_${{ github.ref_name }}_${{ matrix.build_type }}_${{ matrix.type }}.so
            else
              cp build/${{ matrix.build_type }}/${{ env.PROJECT_NAME }}.a package/lib/bytebinder_${{ env.OS_NAME }}_${{ github.ref_name }}_${{ matrix.build_type }}_${{ matrix.type }}.a
            fi
          fi
        shell: bash

      - name: Archive Library
        uses: montudor/action-zip@v1
        with:
          args: zip -r bytebinder_${{ env.OS_NAME }}_${{ github.ref_name }}_${{ matrix.build_type }}_${{ matrix.type }}.zip package

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: bytebinder_${{ env.OS_NAME }}_${{ github.ref_name }}_${{ matrix.build_type }}_${{ matrix.type }}.zip
          path: bytebinder_${{ env.OS_NAME }}_${{ github.ref_name }}_${{ matrix.build_type }}_${{ matrix.type }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bytebinder_${{ env.OS_NAME }}_${{ github.ref_name }}_${{ matrix.build_type }}_${{ matrix.type }}.zip
          asset_name: bytebinder_${{ env.OS_NAME }}_${{ github.ref_name }}_${{ matrix.build_type }}_${{ matrix.type }}.zip
          asset_content_type: application/zip